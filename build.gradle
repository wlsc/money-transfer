plugins {
    id "com.github.johnrengelman.shadow"
    id 'application'
    id 'idea'
    id 'eclipse'
    id 'jacoco'
    id 'checkstyle'
    id 'com.github.spotbugs'
}

idea {
    module {
        downloadJavadoc = true
        downloadSources = true
    }
}

version "0.1"
group "de.wlsc"

sourceCompatibility = 11
targetCompatibility = 11

repositories {
    mavenLocal()
    mavenCentral()
    jcenter()
}

configurations {
    developmentOnly
}

dependencies {
    annotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
    annotationProcessor "io.micronaut:micronaut-inject-java"
    annotationProcessor "io.micronaut:micronaut-validation"
    implementation platform("io.micronaut:micronaut-bom:$micronautVersion")
    implementation "io.micronaut:micronaut-inject"
    implementation "io.micronaut:micronaut-validation"
    implementation "io.micronaut:micronaut-runtime"
    implementation "io.micronaut:micronaut-http-server-netty"
    implementation "io.micronaut:micronaut-http-client"
    runtimeOnly "ch.qos.logback:logback-classic:${logbackVersion}"
    annotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    compileOnly "org.projectlombok:lombok:${lombokVersion}"
    implementation "com.fasterxml.jackson.core:jackson-core:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-databind:${jacksonVersion}"
    implementation "com.fasterxml.jackson.core:jackson-annotations:${jacksonVersion}"
}

test {
    dependencies {
        testImplementation "org.junit.jupiter:junit-jupiter:${junitVersion}"
        testRuntime "org.junit.vintage:junit-vintage-engine:${junitVersion}"
        testImplementation "org.assertj:assertj-core:${assertjVersion}"
        testImplementation "org.mockito:mockito-core:${mockitoVersion}"
        testImplementation "org.mockito:mockito-junit-jupiter:${mockitoVersion}"
        testAnnotationProcessor platform("io.micronaut:micronaut-bom:$micronautVersion")
        testAnnotationProcessor "io.micronaut:micronaut-inject-java"
        testImplementation "io.micronaut.test:micronaut-test-junit5"
        testCompileOnly "org.projectlombok:lombok:${lombokVersion}"
        testAnnotationProcessor "org.projectlombok:lombok:${lombokVersion}"
    }
}

test.classpath += configurations.developmentOnly

mainClassName = "de.wlsc.Application"

test {
    useJUnitPlatform()
}

tasks.withType(JavaCompile) {
    options.encoding = "UTF-8"
    options.compilerArgs.add('-parameters')
}

shadowJar {
    mergeServiceFiles()
}

run.classpath += configurations.developmentOnly
run.jvmArgs('-noverify', '-XX:TieredStopAtLevel=1', '-Dcom.sun.management.jmxremote')

checkstyle {
    toolVersion = "${checkstyleVersion}"
}

spotbugs {
    toolVersion = "${spotbugsVersion}"
    spotbugsTest.enabled = false
}

wrapper {
    gradleVersion = "${gradleWrapperVersion}"
    distributionType = Wrapper.DistributionType.ALL
}